if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
i = init_node
#while(length(unvisited[,1]>0)){
vertex_indices <- graph$v1 == unvisited[i]
print(vertex_indices)
neighbours <- graph$v2[vertex_indices]
print(neighbours)
distances <- graph$w[vertex_indices]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-i]
print(unvisited)
#change i to nearest vertex
i = neighbours[distances == min(distances)]
print(i)
#}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
i = init_node
#while(length(unvisited[,1]>0)){
vertex_indices <- graph$v1 == unvisited[i]
print(vertex_indices)
neighbours <- graph$v2[vertex_indices]
print(neighbours)
distances <- graph$w[vertex_indices]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-i,]
print(unvisited)
#change i to nearest vertex
i = neighbours[distances == min(distances)]
print(i)
#}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
i = init_node
while(length(unvisited[,1]>0)){
vertex_indices <- graph$v1 == unvisited[i]
print(vertex_indices)
neighbours <- graph$v2[vertex_indices]
print(neighbours)
distances <- graph$w[vertex_indices]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-i,]
print(unvisited)
#change i to nearest vertex
i = neighbours[distances == min(distances)]
print(i)
}
}
dijkstra(wiki_graph,1)
?length
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
print(vertex_indices)
neighbours <- graph$v2[vertex_indices]
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(neighbours)
distances <- graph$w[vertex_indices]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
print(vertex_indices)
neighbours <- graph$v2[vertex_indices]
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(neighbours)
distances <- graph$w[graph$v2==neighbours]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[graph$v2==neighbours]
neighbours <- matrix(c(vertex_indices,neighbour_nodes,distances, nrow=3))
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(vertex_indices,neighbour_nodes,distances, nrow=3))
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(vertex_indices,neighbour_nodes,distances), nrow=3)
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
print(c(vertex_indices,neighbour_nodes,distances))
neighbours <- matrix(c(vertex_indices,neighbour_nodes,distances), nrow=3)
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
print(c(neighbour_nodes,distances))
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
visited <- matrix(ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
neighbours <- neighbours[]
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
visited <- c(visited,unvisited[curr_node,])
print(visited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
neighbours <- neighbours[]
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
visited <- c(visited,unvisited[curr_node,])
print(visited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
visited <- c()
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
neighbours <- neighbours[]
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
print(unvisited)
visited <- c(visited,unvisited[curr_node,])
print(visited)
unvisited <- unvisited[-curr_node,]
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
visited <- c()
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
vertex_indices <- graph$v1 == curr_node
neighbour_nodes <- graph$v2[vertex_indices]
distances <- graph$w[vertex_indices]
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
neighbours <- neighbours[]
#print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
#print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
#print(unvisited)
visited <- c(visited,unvisited[curr_node,])
print("visited:")
print(visited)
unvisited <- unvisited[-curr_node,]
print("unvisited:")
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
#print(curr_node)
}
}
dijkstra(wiki_graph,1)
#graph is a data.frame with v1, v2 and w
#init node is numeric scalar that exists in the graph
#return list of distances between inital node and remaining nodes
dijkstra <- function(graph, init_node){
unvisited <- matrix(c(graph[1,1],Inf,NA_integer_),ncol=3)
visited <- c()
for (v1 in graph[,1]){
s1 <- c(unvisited[,1])
if(! v1 %in% s1){
unvisited <- rbind(unvisited, matrix(c(v1,Inf,NA_integer_),ncol=3))
}
}
unvisited[init_node,2] <- 0
curr_node = init_node
while(length(unvisited[,1]>0)){ #could use length(unvisited) as well
print("current node:")
print(curr_node)
# get the indices of all occurences of our current node in v1
vertex_indices <- graph$v1 == curr_node
# use these indices to get all nearest neighbours
neighbour_nodes <- graph$v2[vertex_indices]
# use these indices to get all weights of nearest neighbours
distances <- graph$w[vertex_indices]
# make a matrix with nearest neigbours and their distances
neighbours <- matrix(c(neighbour_nodes,distances), nrow=3)
# only keep the unvisited neighbours
neighbours <- neighbours[neighbours[,1] %in% unvisited[,1],]
print("neighbours:")
print(neighbours)
neighbours <- neighbours[neighbours %in% unvisited[,1]]
#print(distances)
#loop through neighbours, update distances
unvisited[neighbours,2] <- distances
#print(unvisited)
visited <- c(visited,unvisited[curr_node,])
print("visited:")
print(visited)
unvisited <- unvisited[-curr_node,]
print("unvisited:")
print(unvisited)
#change i to nearest vertex
curr_node = neighbours[distances == min(distances)]
#print(curr_node)
}
}
dijkstra(wiki_graph,1)
package.skeleton(name="advancedRLab03")
?package.skeleton
package.skeleton(name="advancedRLab03",path=".")
package.skeleton(name="advancedRLab03", code_files=c("./dijkstra.R", "./euclidean.R"))
version
euclidean()
dijkstra()
library(advancedRLab03)
